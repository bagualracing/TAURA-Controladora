
ControladorBagualProgramV1.2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000082a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000082a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d1  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cc  00000000  00000000  00001945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_11>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  88:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <debug>:
* Low fase 3:  PD4
* High fase 3: PD5
*/

void debug(char on){
	if (on){
  90:	88 23       	and	r24, r24
  92:	11 f0       	breq	.+4      	; 0x98 <debug+0x8>
		PORTB |= (1 << PINB5);
  94:	2d 9a       	sbi	0x05, 5	; 5
  96:	08 95       	ret
	}
	else {
		PORTB &= ~(1 << PINB5);
  98:	2d 98       	cbi	0x05, 5	; 5
  9a:	08 95       	ret

0000009c <__vector_12>:
	}
} 


ISR(TIMER1_COMPB_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
	
	
	PORTD &= ~((1 << PIND6)) & ~((1 << PIND4)) & ~((1 << PIND2));
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	8b 7a       	andi	r24, 0xAB	; 171
  ac:	8b b9       	out	0x0b, r24	; 11
}
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_11>:

ISR(TIMER1_COMPA_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	
	if(s_AnalogValue != 0)
  dc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
  e0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
  e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	a9 01       	movw	r20, r18
  f2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__cmpsf2>
  f6:	88 23       	and	r24, r24
  f8:	b1 f1       	breq	.+108    	; 0x166 <__vector_11+0xac>
	{
		PORTD |= s_phaseTurnedOff;                                  //Seta .os valores LOW da ponte H
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_phaseTurnedOff>
 100:	89 2b       	or	r24, r25
 102:	8b b9       	out	0x0b, r24	; 11
		switch(s_phaseTurnedOff)
 104:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_phaseTurnedOff>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	49 f0       	breq	.+18     	; 0x11e <__vector_11+0x64>
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	61 f0       	breq	.+24     	; 0x128 <__vector_11+0x6e>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	71 f4       	brne	.+28     	; 0x130 <__vector_11+0x76>
		{
			case 1:
				PORTD &= ~((1 << PIND5)) & ~((1 << PIND7));
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	8f 75       	andi	r24, 0x5F	; 95
 118:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1 << PIND3);
 11a:	5b 9a       	sbi	0x0b, 3	; 11
				break;
 11c:	09 c0       	rjmp	.+18     	; 0x130 <__vector_11+0x76>
			case 2:
				PORTD &= ~((1 << PIND3)) & ~((1 << PIND7));
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	87 77       	andi	r24, 0x77	; 119
 122:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1 << PIND5);
 124:	5d 9a       	sbi	0x0b, 5	; 11
				break;
 126:	04 c0       	rjmp	.+8      	; 0x130 <__vector_11+0x76>
			case 4:
				PORTD &= ~((1 << PIND3)) & ~((1 << PIND5));
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	87 7d       	andi	r24, 0xD7	; 215
 12c:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1 << PIND7);
 12e:	5f 9a       	sbi	0x0b, 7	; 11
			//Seta led vermelho
			break;
		}
		

		switch (s_phaseTurnedOn)                                     //Seta os valores HIGH na ponte H
 130:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_phaseTurnedOn>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	49 f0       	breq	.+18     	; 0x14a <__vector_11+0x90>
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	61 f0       	breq	.+24     	; 0x154 <__vector_11+0x9a>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	79 f4       	brne	.+30     	; 0x15e <__vector_11+0xa4>
		{
			case 1:
				PORTD &= ~((1 << PIND4)) & ~((1 << PIND6));
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7a       	andi	r24, 0xAF	; 175
 144:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1 << PIND2);
 146:	5a 9a       	sbi	0x0b, 2	; 11
				break;
 148:	14 c0       	rjmp	.+40     	; 0x172 <__vector_11+0xb8>
			case 2:
				PORTD &= ~((1 << PIND2)) & ~((1 << PIND6));
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8b 7b       	andi	r24, 0xBB	; 187
 14e:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1 << PIND4);
 150:	5c 9a       	sbi	0x0b, 4	; 11
				break;
 152:	0f c0       	rjmp	.+30     	; 0x172 <__vector_11+0xb8>
			case 4:
				PORTD &= ~((1 << PIND4)) & ~((1 << PIND2));
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8b 7e       	andi	r24, 0xEB	; 235
 158:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1 << PIND6);
 15a:	5e 9a       	sbi	0x0b, 6	; 11
				break;
 15c:	0a c0       	rjmp	.+20     	; 0x172 <__vector_11+0xb8>
			default:
				PORTD &= ~((1 << PIND6)) & ~((1 << PIND4))& ~((1 << PIND2));
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8b 7a       	andi	r24, 0xAB	; 171
 162:	8b b9       	out	0x0b, r24	; 11
				//Seta led vermelho
				break;
 164:	06 c0       	rjmp	.+12     	; 0x172 <__vector_11+0xb8>
		}
		
	}
	else
	{
		PORTD &= ~((1 << PIND6)) & ~((1 << PIND4))& ~((1 << PIND2));
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8b 7a       	andi	r24, 0xAB	; 171
 16a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~((1 << PIND7)) & ~((1 << PIND5))& ~((1 << PIND3));
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	87 75       	andi	r24, 0x57	; 87
 170:	8b b9       	out	0x0b, r24	; 11
			
	}
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_4>:

ISR (PCINT1_vect)
{//interrupcao de porta C
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	cf 93       	push	r28
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	char i;
	//se o sensor de freio estiver ligado, desliga todas as fases do sistema
	if(PINC & (1<<3) || PINC & (1<<4))
 1b8:	33 99       	sbic	0x06, 3	; 6
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_4+0x2c>
 1bc:	34 9b       	sbis	0x06, 4	; 6
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <__vector_4+0x36>
	{
		s_phaseTurnedOff = 0;
 1c0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <s_phaseTurnedOff>
		s_phaseTurnedOn = 0;
 1c4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <s_phaseTurnedOn>
 1c8:	4a c0       	rjmp	.+148    	; 0x25e <__vector_4+0xca>
	}
	else
	{
		for(i = 0; i < 3; i++)
		{
			if((PINC & (1 << i)) != (s_lastPortDstate & (1 << i)))	//compara estado atual PINCn com estado passado
 1ca:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <s_lastPortDstate>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	3f ef       	ldi	r19, 0xFF	; 255
			{
				if((PINC & (1 << i)) > 0)
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	70 e0       	ldi	r23, 0x00	; 0
				else
				{
					int PhaseToSetFloat = i - 1;
					if(PhaseToSetFloat<0)
					{
						PhaseToSetFloat = 2;
 1d6:	c2 e0       	ldi	r28, 0x02	; 2
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
	}
	else
	{
		for(i = 0; i < 3; i++)
		{
			if((PINC & (1 << i)) != (s_lastPortDstate & (1 << i)))	//compara estado atual PINCn com estado passado
 1da:	86 b1       	in	r24, 0x06	; 6
 1dc:	a9 01       	movw	r20, r18
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	8a 27       	eor	r24, r26
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	04 2e       	mov	r0, r20
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__vector_4+0x5a>
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <__vector_4+0x56>
 1f2:	80 ff       	sbrs	r24, 0
 1f4:	2f c0       	rjmp	.+94     	; 0x254 <__vector_4+0xc0>
			{
				if((PINC & (1 << i)) > 0)
 1f6:	86 b1       	in	r24, 0x06	; 6
 1f8:	fb 01       	movw	r30, r22
 1fa:	04 2e       	mov	r0, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__vector_4+0x6e>
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <__vector_4+0x6a>
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	8e 23       	and	r24, r30
 20a:	9f 23       	and	r25, r31
 20c:	18 16       	cp	r1, r24
 20e:	19 06       	cpc	r1, r25
 210:	8c f4       	brge	.+34     	; 0x234 <__vector_4+0xa0>
				{
					int PhaseToSetFloat = i - 1;
					if(PhaseToSetFloat<0)
 212:	33 23       	and	r19, r19
 214:	0c f4       	brge	.+2      	; 0x218 <__vector_4+0x84>
					{
						PhaseToSetFloat = 2; // A B C
 216:	2c 2f       	mov	r18, r28
					}                        // 0 0 1
					s_phaseTurnedOn &= ~(1 << (PhaseToSetFloat));		//indica que a fase referente ao sensor hall deve ir para Float
					s_phaseTurnedOn |= (1 << (i));				//indica que a fase referente ao sensor hall deve ir para High
 218:	cb 01       	movw	r24, r22
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__vector_4+0x8c>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <__vector_4+0x88>
 224:	80 95       	com	r24
 226:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_phaseTurnedOn>
 22a:	89 23       	and	r24, r25
 22c:	8e 2b       	or	r24, r30
 22e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <s_phaseTurnedOn>
 232:	10 c0       	rjmp	.+32     	; 0x254 <__vector_4+0xc0>
				}
				else
				{
					int PhaseToSetFloat = i - 1;
					if(PhaseToSetFloat<0)
 234:	33 23       	and	r19, r19
 236:	0c f4       	brge	.+2      	; 0x23a <__vector_4+0xa6>
					{
						PhaseToSetFloat = 2;
 238:	2c 2f       	mov	r18, r28
					}
					s_phaseTurnedOff  &= ~(1 << (PhaseToSetFloat));		//indica que a fase referente ao sensor hall deve ir para Float
					s_phaseTurnedOff  |= (1 << (i));			//indica que a fase referente ao sensor hall deve ir para High
 23a:	cb 01       	movw	r24, r22
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__vector_4+0xae>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	2a 95       	dec	r18
 244:	e2 f7       	brpl	.-8      	; 0x23e <__vector_4+0xaa>
 246:	80 95       	com	r24
 248:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <s_phaseTurnedOff>
 24c:	89 23       	and	r24, r25
 24e:	8e 2b       	or	r24, r30
 250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_phaseTurnedOff>
 254:	9a 01       	movw	r18, r20
		s_phaseTurnedOff = 0;
		s_phaseTurnedOn = 0;
	}
	else
	{
		for(i = 0; i < 3; i++)
 256:	42 30       	cpi	r20, 0x02	; 2
 258:	51 05       	cpc	r21, r1
 25a:	09 f0       	breq	.+2      	; 0x25e <__vector_4+0xca>
 25c:	be cf       	rjmp	.-132    	; 0x1da <__vector_4+0x46>
				}
			}
		}
		
	}
	s_lastPortDstate = PINC;
 25e:	86 b1       	in	r24, 0x06	; 6
 260:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <s_lastPortDstate>
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	cf 91       	pop	r28
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <initADC>:

void initADC()
{
	
	ADMUX |= (1<<REFS0);                                               //5 volts de referência, AVcc com capacitor externo no pino AREF
 288:	ec e7       	ldi	r30, 0x7C	; 124
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	80 83       	st	Z, r24
	
	ADMUX |= (1 << MUX0) | (1 << MUX2);                                // Seta ADC5 como conversor ADC utilizado
 292:	80 81       	ld	r24, Z
 294:	85 60       	ori	r24, 0x05	; 5
 296:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);              //preescaler de 128,liga o ADC
 298:	ea e7       	ldi	r30, 0x7A	; 122
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	87 68       	ori	r24, 0x87	; 135
 2a0:	80 83       	st	Z, r24
	
	//ADCSRB = 0x00;			                           //modo de conversão contínua
	
	DIDR0 |= (1 << ADC5D);                                             //desabilita porta digital ADC5, ou PINC5, para possibilitar o ADC a trabalhar
 2a2:	ae e7       	ldi	r26, 0x7E	; 126
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	8c 91       	ld	r24, X
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADSC);                                               // Inicia Conversão
 2ac:	80 81       	ld	r24, Z
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	80 83       	st	Z, r24
 2b2:	08 95       	ret

000002b4 <initPWMTimer>:
	//valor colocado no registrador de interrupção mínimo: 65535*3,8/5 = 49807 = 0xC28F
	//valor de tensão máximo desejado: 4,6 V
	//valor máximo colocado: 65535*4,6/5 = 60292 = 0xEB84
	//uma interrupção ocorre em 65535, com o intuito de colocar o valor positivo na saída, para depois este ser zerado pela outra
	
	TCCR1B = (1<<CS10)|(1<<WGM12);		//Sem prescaler , modo CTC
 2b4:	89 e0       	ldi	r24, 0x09	; 9
 2b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<OCIE1B)|(1<<OCIE1A);	//habilita interrupcao nos comparadores A e B, dando clear no A
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0x00;
 2c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = TIMER_PERIOD;
 2c8:	88 ee       	ldi	r24, 0xE8	; 232
 2ca:	93 e0       	ldi	r25, 0x03	; 3
 2cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0;
 2d4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2d8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2dc:	08 95       	ret

000002de <InitAtmega>:
	
}

void InitAtmega()
{
	DDRC = 0;					// seta a porta PCx para input (HALLS)
 2de:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;				// liga todos resistores de pull-up da porta PC
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	88 b9       	out	0x08, r24	; 8

	DDRD |= 0xFF;				// seta porta D como output (PWMs)
 2e4:	9a b1       	in	r25, 0x0a	; 10
 2e6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;					// inicia a Porta D toda zerada
 2e8:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= 1 << 5 ;				// seta porta B como output (PWMs)
 2ea:	25 9a       	sbi	0x04, 5	; 4
	PORTB = 0;					// inicia a Porta B toda zerada
 2ec:	15 b8       	out	0x05, r1	; 5

	PCICR |= 1 << PCIE1;		// Habilita interrupção da porta C
 2ee:	e8 e6       	ldi	r30, 0x68	; 104
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	80 83       	st	Z, r24
	PCMSK1 |=( (1 << PCINT8) | (1 << PCINT9) |(1 << PCINT10) |(1 << PCINT11) |(1 << PCINT12));              // Mask indicando que apenas PC0, PC1, PC2, PC3 e PC4  causarão interrupção
 2f8:	ec e6       	ldi	r30, 0x6C	; 108
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8f 61       	ori	r24, 0x1F	; 31
 300:	80 83       	st	Z, r24

	initPWMTimer();				//inicia PWM
 302:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <initPWMTimer>
	initADC();					//inicia conversor analogico digital
 306:	0e 94 44 01 	call	0x288	; 0x288 <initADC>
	sei();						//habilita interrupcoes
 30a:	78 94       	sei
 30c:	08 95       	ret

0000030e <main>:
}

int main(void)
{
	InitAtmega();				//Setup do ATmega
 30e:	0e 94 6f 01 	call	0x2de	; 0x2de <InitAtmega>
	
	debug(0);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 48 00 	call	0x90	; 0x90 <debug>
	
	while (1)
	{	
		while ( (ADCSRA & (1 << ADSC)) );        // Espera ADC terminar a conversão
 318:	ca e7       	ldi	r28, 0x7A	; 122
 31a:	d0 e0       	ldi	r29, 0x00	; 0
		float valorAdc = (float)(ADC/165) - 4.7;
 31c:	0f 2e       	mov	r0, r31
 31e:	f8 e7       	ldi	r31, 0x78	; 120
 320:	ef 2e       	mov	r14, r31
 322:	f1 2c       	mov	r15, r1
 324:	f0 2d       	mov	r31, r0
		else if(valorAdc < 0)
		{
			valorAdc = 0;
		}
		s_AnalogValue = valorAdc;
		OCR1B = (int) (TIMER_PERIOD* valorAdc);   // calcula novo valor de PWM
 326:	0a e8       	ldi	r16, 0x8A	; 138
 328:	10 e0       	ldi	r17, 0x00	; 0
	
	debug(0);
	
	while (1)
	{	
		while ( (ADCSRA & (1 << ADSC)) );        // Espera ADC terminar a conversão
 32a:	88 81       	ld	r24, Y
 32c:	86 fd       	sbrc	r24, 6
 32e:	fd cf       	rjmp	.-6      	; 0x32a <main+0x1c>
		float valorAdc = (float)(ADC/165) - 4.7;
 330:	f7 01       	movw	r30, r14
 332:	40 81       	ld	r20, Z
 334:	51 81       	ldd	r21, Z+1	; 0x01
 336:	9a 01       	movw	r18, r20
 338:	a1 e3       	ldi	r26, 0x31	; 49
 33a:	bd e8       	ldi	r27, 0x8D	; 141
 33c:	0e 94 ca 03 	call	0x794	; 0x794 <__umulhisi3>
 340:	48 1b       	sub	r20, r24
 342:	59 0b       	sbc	r21, r25
 344:	56 95       	lsr	r21
 346:	47 95       	ror	r20
 348:	bc 01       	movw	r22, r24
 34a:	64 0f       	add	r22, r20
 34c:	75 1f       	adc	r23, r21
 34e:	66 0f       	add	r22, r22
 350:	67 2f       	mov	r22, r23
 352:	66 1f       	adc	r22, r22
 354:	77 0b       	sbc	r23, r23
 356:	71 95       	neg	r23
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 a6 02 	call	0x54c	; 0x54c <__floatunsisf>
 360:	26 e6       	ldi	r18, 0x66	; 102
 362:	36 e6       	ldi	r19, 0x66	; 102
 364:	46 e9       	ldi	r20, 0x96	; 150
 366:	50 e4       	ldi	r21, 0x40	; 64
 368:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__subsf3>
 36c:	4b 01       	movw	r8, r22
 36e:	5c 01       	movw	r10, r24
		if(valorAdc > 1)
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__gesf2>
 37c:	18 16       	cp	r1, r24
 37e:	6c f0       	brlt	.+26     	; 0x39a <main+0x8c>
		{
			valorAdc = 1;
		}
		else if(valorAdc < 0)
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	a9 01       	movw	r20, r18
 386:	c5 01       	movw	r24, r10
 388:	b4 01       	movw	r22, r8
 38a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__cmpsf2>
 38e:	88 23       	and	r24, r24
 390:	64 f4       	brge	.+24     	; 0x3aa <main+0x9c>
		{
			valorAdc = 0;
 392:	81 2c       	mov	r8, r1
 394:	91 2c       	mov	r9, r1
 396:	54 01       	movw	r10, r8
 398:	08 c0       	rjmp	.+16     	; 0x3aa <main+0x9c>
	{	
		while ( (ADCSRA & (1 << ADSC)) );        // Espera ADC terminar a conversão
		float valorAdc = (float)(ADC/165) - 4.7;
		if(valorAdc > 1)
		{
			valorAdc = 1;
 39a:	0f 2e       	mov	r0, r31
 39c:	81 2c       	mov	r8, r1
 39e:	91 2c       	mov	r9, r1
 3a0:	f0 e8       	ldi	r31, 0x80	; 128
 3a2:	af 2e       	mov	r10, r31
 3a4:	ff e3       	ldi	r31, 0x3F	; 63
 3a6:	bf 2e       	mov	r11, r31
 3a8:	f0 2d       	mov	r31, r0
		}
		else if(valorAdc < 0)
		{
			valorAdc = 0;
		}
		s_AnalogValue = valorAdc;
 3aa:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <_edata>
 3ae:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <_edata+0x1>
 3b2:	a0 92 02 01 	sts	0x0102, r10	; 0x800102 <_edata+0x2>
 3b6:	b0 92 03 01 	sts	0x0103, r11	; 0x800103 <_edata+0x3>
		OCR1B = (int) (TIMER_PERIOD* valorAdc);   // calcula novo valor de PWM
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	4a e7       	ldi	r20, 0x7A	; 122
 3c0:	54 e4       	ldi	r21, 0x44	; 68
 3c2:	c5 01       	movw	r24, r10
 3c4:	b4 01       	movw	r22, r8
 3c6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__mulsf3>
 3ca:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixsfsi>
 3ce:	f8 01       	movw	r30, r16
 3d0:	71 83       	std	Z+1, r23	; 0x01
 3d2:	60 83       	st	Z, r22
		if(OCR1B>0){
 3d4:	80 81       	ld	r24, Z
 3d6:	91 81       	ldd	r25, Z+1	; 0x01
 3d8:	89 2b       	or	r24, r25
 3da:	19 f0       	breq	.+6      	; 0x3e2 <main+0xd4>
			debug(1);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 48 00 	call	0x90	; 0x90 <debug>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e2:	ff ef       	ldi	r31, 0xFF	; 255
 3e4:	23 ec       	ldi	r18, 0xC3	; 195
 3e6:	89 e0       	ldi	r24, 0x09	; 9
 3e8:	f1 50       	subi	r31, 0x01	; 1
 3ea:	20 40       	sbci	r18, 0x00	; 0
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <main+0xda>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <main+0xe4>
 3f2:	00 00       	nop
		}
		_delay_ms(200);                        // Espera 1/5 de segundo, não muito preciso, mas não faz real diferença
		ADCSRA |= (1<<ADSC);
 3f4:	88 81       	ld	r24, Y
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	88 83       	st	Y, r24
	}
 3fa:	97 cf       	rjmp	.-210    	; 0x32a <main+0x1c>

000003fc <__subsf3>:
 3fc:	50 58       	subi	r21, 0x80	; 128

000003fe <__addsf3>:
 3fe:	bb 27       	eor	r27, r27
 400:	aa 27       	eor	r26, r26
 402:	0e 94 16 02 	call	0x42c	; 0x42c <__addsf3x>
 406:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_round>
 40a:	0e 94 10 03 	call	0x620	; 0x620 <__fp_pscA>
 40e:	38 f0       	brcs	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscB>
 414:	20 f0       	brcs	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 416:	39 f4       	brne	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	9f 3f       	cpi	r25, 0xFF	; 255
 41a:	19 f4       	brne	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	26 f4       	brtc	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41e:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_nan>
 422:	0e f4       	brtc	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	e0 95       	com	r30
 426:	e7 fb       	bst	r30, 7
 428:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>

0000042c <__addsf3x>:
 42c:	e9 2f       	mov	r30, r25
 42e:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_split3>
 432:	58 f3       	brcs	.-42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 434:	ba 17       	cp	r27, r26
 436:	62 07       	cpc	r22, r18
 438:	73 07       	cpc	r23, r19
 43a:	84 07       	cpc	r24, r20
 43c:	95 07       	cpc	r25, r21
 43e:	20 f0       	brcs	.+8      	; 0x448 <__addsf3x+0x1c>
 440:	79 f4       	brne	.+30     	; 0x460 <__addsf3x+0x34>
 442:	a6 f5       	brtc	.+104    	; 0x4ac <__addsf3x+0x80>
 444:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_zero>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3x+0x20>
 44a:	e0 95       	com	r30
 44c:	0b 2e       	mov	r0, r27
 44e:	ba 2f       	mov	r27, r26
 450:	a0 2d       	mov	r26, r0
 452:	0b 01       	movw	r0, r22
 454:	b9 01       	movw	r22, r18
 456:	90 01       	movw	r18, r0
 458:	0c 01       	movw	r0, r24
 45a:	ca 01       	movw	r24, r20
 45c:	a0 01       	movw	r20, r0
 45e:	11 24       	eor	r1, r1
 460:	ff 27       	eor	r31, r31
 462:	59 1b       	sub	r21, r25
 464:	99 f0       	breq	.+38     	; 0x48c <__addsf3x+0x60>
 466:	59 3f       	cpi	r21, 0xF9	; 249
 468:	50 f4       	brcc	.+20     	; 0x47e <__addsf3x+0x52>
 46a:	50 3e       	cpi	r21, 0xE0	; 224
 46c:	68 f1       	brcs	.+90     	; 0x4c8 <__addsf3x+0x9c>
 46e:	1a 16       	cp	r1, r26
 470:	f0 40       	sbci	r31, 0x00	; 0
 472:	a2 2f       	mov	r26, r18
 474:	23 2f       	mov	r18, r19
 476:	34 2f       	mov	r19, r20
 478:	44 27       	eor	r20, r20
 47a:	58 5f       	subi	r21, 0xF8	; 248
 47c:	f3 cf       	rjmp	.-26     	; 0x464 <__addsf3x+0x38>
 47e:	46 95       	lsr	r20
 480:	37 95       	ror	r19
 482:	27 95       	ror	r18
 484:	a7 95       	ror	r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	53 95       	inc	r21
 48a:	c9 f7       	brne	.-14     	; 0x47e <__addsf3x+0x52>
 48c:	7e f4       	brtc	.+30     	; 0x4ac <__addsf3x+0x80>
 48e:	1f 16       	cp	r1, r31
 490:	ba 0b       	sbc	r27, r26
 492:	62 0b       	sbc	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba f0       	brmi	.+46     	; 0x4c8 <__addsf3x+0x9c>
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	a1 f0       	breq	.+40     	; 0x4c6 <__addsf3x+0x9a>
 49e:	ff 0f       	add	r31, r31
 4a0:	bb 1f       	adc	r27, r27
 4a2:	66 1f       	adc	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	c2 f7       	brpl	.-16     	; 0x49a <__addsf3x+0x6e>
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__addsf3x+0x9c>
 4ac:	ba 0f       	add	r27, r26
 4ae:	62 1f       	adc	r22, r18
 4b0:	73 1f       	adc	r23, r19
 4b2:	84 1f       	adc	r24, r20
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <__addsf3x+0x9c>
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f7 95       	ror	r31
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__addsf3x+0x9a>
 4c4:	b0 cf       	rjmp	.-160    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 4c6:	93 95       	inc	r25
 4c8:	88 0f       	add	r24, r24
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__addsf3x+0xa2>
 4cc:	99 27       	eor	r25, r25
 4ce:	ee 0f       	add	r30, r30
 4d0:	97 95       	ror	r25
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret

000004d6 <__cmpsf2>:
 4d6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_cmp>
 4da:	08 f4       	brcc	.+2      	; 0x4de <__cmpsf2+0x8>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <__fixsfsi>:
 4e0:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fixunssfsi>
 4e4:	68 94       	set
 4e6:	b1 11       	cpse	r27, r1
 4e8:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>
 4ec:	08 95       	ret

000004ee <__fixunssfsi>:
 4ee:	0e 94 37 03 	call	0x66e	; 0x66e <__fp_splitA>
 4f2:	88 f0       	brcs	.+34     	; 0x516 <__fixunssfsi+0x28>
 4f4:	9f 57       	subi	r25, 0x7F	; 127
 4f6:	98 f0       	brcs	.+38     	; 0x51e <__fixunssfsi+0x30>
 4f8:	b9 2f       	mov	r27, r25
 4fa:	99 27       	eor	r25, r25
 4fc:	b7 51       	subi	r27, 0x17	; 23
 4fe:	b0 f0       	brcs	.+44     	; 0x52c <__fixunssfsi+0x3e>
 500:	e1 f0       	breq	.+56     	; 0x53a <__fixunssfsi+0x4c>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	1a f0       	brmi	.+6      	; 0x512 <__fixunssfsi+0x24>
 50c:	ba 95       	dec	r27
 50e:	c9 f7       	brne	.-14     	; 0x502 <__fixunssfsi+0x14>
 510:	14 c0       	rjmp	.+40     	; 0x53a <__fixunssfsi+0x4c>
 512:	b1 30       	cpi	r27, 0x01	; 1
 514:	91 f0       	breq	.+36     	; 0x53a <__fixunssfsi+0x4c>
 516:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_zero>
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	08 95       	ret
 51e:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_zero>
 522:	67 2f       	mov	r22, r23
 524:	78 2f       	mov	r23, r24
 526:	88 27       	eor	r24, r24
 528:	b8 5f       	subi	r27, 0xF8	; 248
 52a:	39 f0       	breq	.+14     	; 0x53a <__fixunssfsi+0x4c>
 52c:	b9 3f       	cpi	r27, 0xF9	; 249
 52e:	cc f3       	brlt	.-14     	; 0x522 <__fixunssfsi+0x34>
 530:	86 95       	lsr	r24
 532:	77 95       	ror	r23
 534:	67 95       	ror	r22
 536:	b3 95       	inc	r27
 538:	d9 f7       	brne	.-10     	; 0x530 <__fixunssfsi+0x42>
 53a:	3e f4       	brtc	.+14     	; 0x54a <__fixunssfsi+0x5c>
 53c:	90 95       	com	r25
 53e:	80 95       	com	r24
 540:	70 95       	com	r23
 542:	61 95       	neg	r22
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__floatunsisf>:
 54c:	e8 94       	clt
 54e:	09 c0       	rjmp	.+18     	; 0x562 <__floatsisf+0x12>

00000550 <__floatsisf>:
 550:	97 fb       	bst	r25, 7
 552:	3e f4       	brtc	.+14     	; 0x562 <__floatsisf+0x12>
 554:	90 95       	com	r25
 556:	80 95       	com	r24
 558:	70 95       	com	r23
 55a:	61 95       	neg	r22
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	99 23       	and	r25, r25
 564:	a9 f0       	breq	.+42     	; 0x590 <__floatsisf+0x40>
 566:	f9 2f       	mov	r31, r25
 568:	96 e9       	ldi	r25, 0x96	; 150
 56a:	bb 27       	eor	r27, r27
 56c:	93 95       	inc	r25
 56e:	f6 95       	lsr	r31
 570:	87 95       	ror	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b7 95       	ror	r27
 578:	f1 11       	cpse	r31, r1
 57a:	f8 cf       	rjmp	.-16     	; 0x56c <__floatsisf+0x1c>
 57c:	fa f4       	brpl	.+62     	; 0x5bc <__floatsisf+0x6c>
 57e:	bb 0f       	add	r27, r27
 580:	11 f4       	brne	.+4      	; 0x586 <__floatsisf+0x36>
 582:	60 ff       	sbrs	r22, 0
 584:	1b c0       	rjmp	.+54     	; 0x5bc <__floatsisf+0x6c>
 586:	6f 5f       	subi	r22, 0xFF	; 255
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	16 c0       	rjmp	.+44     	; 0x5bc <__floatsisf+0x6c>
 590:	88 23       	and	r24, r24
 592:	11 f0       	breq	.+4      	; 0x598 <__floatsisf+0x48>
 594:	96 e9       	ldi	r25, 0x96	; 150
 596:	11 c0       	rjmp	.+34     	; 0x5ba <__floatsisf+0x6a>
 598:	77 23       	and	r23, r23
 59a:	21 f0       	breq	.+8      	; 0x5a4 <__floatsisf+0x54>
 59c:	9e e8       	ldi	r25, 0x8E	; 142
 59e:	87 2f       	mov	r24, r23
 5a0:	76 2f       	mov	r23, r22
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <__floatsisf+0x5e>
 5a4:	66 23       	and	r22, r22
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <__floatsisf+0x74>
 5a8:	96 e8       	ldi	r25, 0x86	; 134
 5aa:	86 2f       	mov	r24, r22
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	2a f0       	brmi	.+10     	; 0x5bc <__floatsisf+0x6c>
 5b2:	9a 95       	dec	r25
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	da f7       	brpl	.-10     	; 0x5b2 <__floatsisf+0x62>
 5bc:	88 0f       	add	r24, r24
 5be:	96 95       	lsr	r25
 5c0:	87 95       	ror	r24
 5c2:	97 f9       	bld	r25, 7
 5c4:	08 95       	ret

000005c6 <__fp_cmp>:
 5c6:	99 0f       	add	r25, r25
 5c8:	00 08       	sbc	r0, r0
 5ca:	55 0f       	add	r21, r21
 5cc:	aa 0b       	sbc	r26, r26
 5ce:	e0 e8       	ldi	r30, 0x80	; 128
 5d0:	fe ef       	ldi	r31, 0xFE	; 254
 5d2:	16 16       	cp	r1, r22
 5d4:	17 06       	cpc	r1, r23
 5d6:	e8 07       	cpc	r30, r24
 5d8:	f9 07       	cpc	r31, r25
 5da:	c0 f0       	brcs	.+48     	; 0x60c <__fp_cmp+0x46>
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	e4 07       	cpc	r30, r20
 5e2:	f5 07       	cpc	r31, r21
 5e4:	98 f0       	brcs	.+38     	; 0x60c <__fp_cmp+0x46>
 5e6:	62 1b       	sub	r22, r18
 5e8:	73 0b       	sbc	r23, r19
 5ea:	84 0b       	sbc	r24, r20
 5ec:	95 0b       	sbc	r25, r21
 5ee:	39 f4       	brne	.+14     	; 0x5fe <__fp_cmp+0x38>
 5f0:	0a 26       	eor	r0, r26
 5f2:	61 f0       	breq	.+24     	; 0x60c <__fp_cmp+0x46>
 5f4:	23 2b       	or	r18, r19
 5f6:	24 2b       	or	r18, r20
 5f8:	25 2b       	or	r18, r21
 5fa:	21 f4       	brne	.+8      	; 0x604 <__fp_cmp+0x3e>
 5fc:	08 95       	ret
 5fe:	0a 26       	eor	r0, r26
 600:	09 f4       	brne	.+2      	; 0x604 <__fp_cmp+0x3e>
 602:	a1 40       	sbci	r26, 0x01	; 1
 604:	a6 95       	lsr	r26
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	81 1d       	adc	r24, r1
 60a:	81 1d       	adc	r24, r1
 60c:	08 95       	ret

0000060e <__fp_inf>:
 60e:	97 f9       	bld	r25, 7
 610:	9f 67       	ori	r25, 0x7F	; 127
 612:	80 e8       	ldi	r24, 0x80	; 128
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	08 95       	ret

0000061a <__fp_nan>:
 61a:	9f ef       	ldi	r25, 0xFF	; 255
 61c:	80 ec       	ldi	r24, 0xC0	; 192
 61e:	08 95       	ret

00000620 <__fp_pscA>:
 620:	00 24       	eor	r0, r0
 622:	0a 94       	dec	r0
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	18 06       	cpc	r1, r24
 62a:	09 06       	cpc	r0, r25
 62c:	08 95       	ret

0000062e <__fp_pscB>:
 62e:	00 24       	eor	r0, r0
 630:	0a 94       	dec	r0
 632:	12 16       	cp	r1, r18
 634:	13 06       	cpc	r1, r19
 636:	14 06       	cpc	r1, r20
 638:	05 06       	cpc	r0, r21
 63a:	08 95       	ret

0000063c <__fp_round>:
 63c:	09 2e       	mov	r0, r25
 63e:	03 94       	inc	r0
 640:	00 0c       	add	r0, r0
 642:	11 f4       	brne	.+4      	; 0x648 <__fp_round+0xc>
 644:	88 23       	and	r24, r24
 646:	52 f0       	brmi	.+20     	; 0x65c <__fp_round+0x20>
 648:	bb 0f       	add	r27, r27
 64a:	40 f4       	brcc	.+16     	; 0x65c <__fp_round+0x20>
 64c:	bf 2b       	or	r27, r31
 64e:	11 f4       	brne	.+4      	; 0x654 <__fp_round+0x18>
 650:	60 ff       	sbrs	r22, 0
 652:	04 c0       	rjmp	.+8      	; 0x65c <__fp_round+0x20>
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	08 95       	ret

0000065e <__fp_split3>:
 65e:	57 fd       	sbrc	r21, 7
 660:	90 58       	subi	r25, 0x80	; 128
 662:	44 0f       	add	r20, r20
 664:	55 1f       	adc	r21, r21
 666:	59 f0       	breq	.+22     	; 0x67e <__fp_splitA+0x10>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	71 f0       	breq	.+28     	; 0x688 <__fp_splitA+0x1a>
 66c:	47 95       	ror	r20

0000066e <__fp_splitA>:
 66e:	88 0f       	add	r24, r24
 670:	97 fb       	bst	r25, 7
 672:	99 1f       	adc	r25, r25
 674:	61 f0       	breq	.+24     	; 0x68e <__fp_splitA+0x20>
 676:	9f 3f       	cpi	r25, 0xFF	; 255
 678:	79 f0       	breq	.+30     	; 0x698 <__fp_splitA+0x2a>
 67a:	87 95       	ror	r24
 67c:	08 95       	ret
 67e:	12 16       	cp	r1, r18
 680:	13 06       	cpc	r1, r19
 682:	14 06       	cpc	r1, r20
 684:	55 1f       	adc	r21, r21
 686:	f2 cf       	rjmp	.-28     	; 0x66c <__fp_split3+0xe>
 688:	46 95       	lsr	r20
 68a:	f1 df       	rcall	.-30     	; 0x66e <__fp_splitA>
 68c:	08 c0       	rjmp	.+16     	; 0x69e <__fp_splitA+0x30>
 68e:	16 16       	cp	r1, r22
 690:	17 06       	cpc	r1, r23
 692:	18 06       	cpc	r1, r24
 694:	99 1f       	adc	r25, r25
 696:	f1 cf       	rjmp	.-30     	; 0x67a <__fp_splitA+0xc>
 698:	86 95       	lsr	r24
 69a:	71 05       	cpc	r23, r1
 69c:	61 05       	cpc	r22, r1
 69e:	08 94       	sec
 6a0:	08 95       	ret

000006a2 <__fp_zero>:
 6a2:	e8 94       	clt

000006a4 <__fp_szero>:
 6a4:	bb 27       	eor	r27, r27
 6a6:	66 27       	eor	r22, r22
 6a8:	77 27       	eor	r23, r23
 6aa:	cb 01       	movw	r24, r22
 6ac:	97 f9       	bld	r25, 7
 6ae:	08 95       	ret

000006b0 <__gesf2>:
 6b0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_cmp>
 6b4:	08 f4       	brcc	.+2      	; 0x6b8 <__gesf2+0x8>
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	08 95       	ret

000006ba <__mulsf3>:
 6ba:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3x>
 6be:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_round>
 6c2:	0e 94 10 03 	call	0x620	; 0x620 <__fp_pscA>
 6c6:	38 f0       	brcs	.+14     	; 0x6d6 <__mulsf3+0x1c>
 6c8:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscB>
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__mulsf3+0x1c>
 6ce:	95 23       	and	r25, r21
 6d0:	11 f0       	breq	.+4      	; 0x6d6 <__mulsf3+0x1c>
 6d2:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>
 6d6:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_nan>
 6da:	11 24       	eor	r1, r1
 6dc:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>

000006e0 <__mulsf3x>:
 6e0:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_split3>
 6e4:	70 f3       	brcs	.-36     	; 0x6c2 <__mulsf3+0x8>

000006e6 <__mulsf3_pse>:
 6e6:	95 9f       	mul	r25, r21
 6e8:	c1 f3       	breq	.-16     	; 0x6da <__mulsf3+0x20>
 6ea:	95 0f       	add	r25, r21
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	55 1f       	adc	r21, r21
 6f0:	62 9f       	mul	r22, r18
 6f2:	f0 01       	movw	r30, r0
 6f4:	72 9f       	mul	r23, r18
 6f6:	bb 27       	eor	r27, r27
 6f8:	f0 0d       	add	r31, r0
 6fa:	b1 1d       	adc	r27, r1
 6fc:	63 9f       	mul	r22, r19
 6fe:	aa 27       	eor	r26, r26
 700:	f0 0d       	add	r31, r0
 702:	b1 1d       	adc	r27, r1
 704:	aa 1f       	adc	r26, r26
 706:	64 9f       	mul	r22, r20
 708:	66 27       	eor	r22, r22
 70a:	b0 0d       	add	r27, r0
 70c:	a1 1d       	adc	r26, r1
 70e:	66 1f       	adc	r22, r22
 710:	82 9f       	mul	r24, r18
 712:	22 27       	eor	r18, r18
 714:	b0 0d       	add	r27, r0
 716:	a1 1d       	adc	r26, r1
 718:	62 1f       	adc	r22, r18
 71a:	73 9f       	mul	r23, r19
 71c:	b0 0d       	add	r27, r0
 71e:	a1 1d       	adc	r26, r1
 720:	62 1f       	adc	r22, r18
 722:	83 9f       	mul	r24, r19
 724:	a0 0d       	add	r26, r0
 726:	61 1d       	adc	r22, r1
 728:	22 1f       	adc	r18, r18
 72a:	74 9f       	mul	r23, r20
 72c:	33 27       	eor	r19, r19
 72e:	a0 0d       	add	r26, r0
 730:	61 1d       	adc	r22, r1
 732:	23 1f       	adc	r18, r19
 734:	84 9f       	mul	r24, r20
 736:	60 0d       	add	r22, r0
 738:	21 1d       	adc	r18, r1
 73a:	82 2f       	mov	r24, r18
 73c:	76 2f       	mov	r23, r22
 73e:	6a 2f       	mov	r22, r26
 740:	11 24       	eor	r1, r1
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	50 40       	sbci	r21, 0x00	; 0
 746:	9a f0       	brmi	.+38     	; 0x76e <__mulsf3_pse+0x88>
 748:	f1 f0       	breq	.+60     	; 0x786 <__mulsf3_pse+0xa0>
 74a:	88 23       	and	r24, r24
 74c:	4a f0       	brmi	.+18     	; 0x760 <__mulsf3_pse+0x7a>
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	bb 1f       	adc	r27, r27
 754:	66 1f       	adc	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	91 50       	subi	r25, 0x01	; 1
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	a9 f7       	brne	.-22     	; 0x74a <__mulsf3_pse+0x64>
 760:	9e 3f       	cpi	r25, 0xFE	; 254
 762:	51 05       	cpc	r21, r1
 764:	80 f0       	brcs	.+32     	; 0x786 <__mulsf3_pse+0xa0>
 766:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_inf>
 76a:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_szero>
 76e:	5f 3f       	cpi	r21, 0xFF	; 255
 770:	e4 f3       	brlt	.-8      	; 0x76a <__mulsf3_pse+0x84>
 772:	98 3e       	cpi	r25, 0xE8	; 232
 774:	d4 f3       	brlt	.-12     	; 0x76a <__mulsf3_pse+0x84>
 776:	86 95       	lsr	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f7 95       	ror	r31
 780:	e7 95       	ror	r30
 782:	9f 5f       	subi	r25, 0xFF	; 255
 784:	c1 f7       	brne	.-16     	; 0x776 <__mulsf3_pse+0x90>
 786:	fe 2b       	or	r31, r30
 788:	88 0f       	add	r24, r24
 78a:	91 1d       	adc	r25, r1
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__umulhisi3>:
 794:	a2 9f       	mul	r26, r18
 796:	b0 01       	movw	r22, r0
 798:	b3 9f       	mul	r27, r19
 79a:	c0 01       	movw	r24, r0
 79c:	a3 9f       	mul	r26, r19
 79e:	70 0d       	add	r23, r0
 7a0:	81 1d       	adc	r24, r1
 7a2:	11 24       	eor	r1, r1
 7a4:	91 1d       	adc	r25, r1
 7a6:	b2 9f       	mul	r27, r18
 7a8:	70 0d       	add	r23, r0
 7aa:	81 1d       	adc	r24, r1
 7ac:	11 24       	eor	r1, r1
 7ae:	91 1d       	adc	r25, r1
 7b0:	08 95       	ret

000007b2 <_exit>:
 7b2:	f8 94       	cli

000007b4 <__stop_program>:
 7b4:	ff cf       	rjmp	.-2      	; 0x7b4 <__stop_program>
